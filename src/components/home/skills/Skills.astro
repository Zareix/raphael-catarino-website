---
import { Skill, db } from 'astro:db';
import { getLangFromUrl, useTranslations } from '~/i18n';
import GridLines from '~/components/home/skills/GridLines.astro';
import { groupBy } from '~/lib/utils';
import { Image } from 'astro:assets';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const skills = await db.select().from(Skill);
const domains = groupBy(skills, ({ category }) => category);
---

<section
  id="skills"
  class="relative grid w-full place-content-center overflow-hidden py-12"
>
  <GridLines />
  <h1>
    {t('skills.title')}
  </h1>
  <h2>
    {t('skills.subtitle')}
  </h2>
  <div
    class="container mt-6 flex flex-wrap items-center justify-center gap-6 md:gap-12"
  >
    {
      Object.entries(domains).map((domain) => (
        <article class="relative mx-4 flex min-w-[300px] flex-wrap justify-center gap-x-8 gap-y-2 overflow-hidden rounded-lg border border-gray-700 bg-slate-800/90 px-4 pb-6 pt-12 font-mono text-gray-50 shadow-md md:w-max md:min-w-[400px] md:max-w-[30%] md:px-8">
          <div class="absolute left-2 top-2 flex gap-1 md:left-4 md:top-3">
            <div class="h-2 w-2 rounded-full bg-red-400 md:h-3 md:w-3" />
            <div class="aspect-square h-2 w-2 rounded-full bg-yellow-400 md:h-3 md:w-3" />
            <div class="aspect-square h-2 w-2 rounded-full bg-green-400 md:h-3 md:w-3" />
          </div>
          <h3 class="absolute left-1/2 top-4 -translate-x-1/2 whitespace-nowrap md:top-2">
            {domain[0]}
          </h3>
          {domain[1].map((skill) => (
            <div class="grid max-w-[33%] justify-items-center text-center">
              <Image
                src={skill.icon}
                alt={skill.name}
                class="relative overflow-hidden rounded-md"
                width={64}
                height={64}
                densities={[1, 2]}
              />
              <h4 class="mt-1 text-sm">{skill.name}</h4>
            </div>
          ))}
        </article>
      ))
    }
  </div>
</section>
<script>
  import { gsap } from 'gsap';

  const articles = gsap.utils.toArray<Element>('#skills article');

  articles.forEach((article) => {
    if (window.matchMedia('(max-width: 768px)').matches) {
      gsap.from(article, {
        scrollTrigger: {
          trigger: article,
          start: 'top 90%',
        },
        x: -100,
        opacity: 0,
        duration: 0.5,
      });
    } else {
      gsap.from(article, {
        scrollTrigger: {
          trigger: article,
          start: 'top 90%',
        },
        y: 100,
        opacity: 0,
        duration: 0.5,
      });
    }
  });

  const cards = document.querySelectorAll<HTMLElement>('#skills article');
  cards.forEach((card) => {
    card.addEventListener('mousemove', (event) => {
      const e = event as MouseEvent;
      const rect = card.getBoundingClientRect();
      const left = e.clientX - rect.left;
      const top = e.clientY - rect.top;
      card.style.setProperty('--left', `${left}px`);
      card.style.setProperty('--top', `${top}px`);
    });
  });
</script>
<style>
  article {
    --left: 0px;
    --top: 0px;
  }

  article::before {
    content: '';
    width: 8rem;
    height: 8rem;

    border-radius: 50%;
    @apply bg-purple-800 bg-opacity-70;
    filter: blur(50px);
    opacity: 0;
    transition: opacity 500ms;

    position: absolute;
    top: var(--top);
    left: var(--left);
    transform: translate(-50%, -50%);
    z-index: -10;
  }

  article:hover::before {
    opacity: 1;
  }
</style>
